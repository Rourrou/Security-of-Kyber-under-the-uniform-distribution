import matplotlib.pyplot as plt
import numpy as np
plt.rcParams['font.family'] = 'SimSun'
plt.rcParams['font.size'] = 22

# 数据初始化
def Kyber512_uniform_plot():
    x1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    x2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    y1 = [105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138]
    y2 = [-12.635903131402776, -17.18513751133368, -19.25449509287424, -19.98891644698829, -20.200261121201667, -20.25569590778159, -20.269394850604986, -20.272954352590933, -20.273667571185094, -54.927834725254115, -73.83645393161555, -83.90723820702087, -88.72389938877944, -90.72344799459748, -91.39954192277618, -91.58457039700126, -91.63416526819942, -91.64418796337034, -169.35414380719766, -228.5292968896388, -261.04831589726524, -277.67107571824954, -285.6990517219198, -289.31116814350383, -290.63630734207914, -291.05958742471535, -291.15096487401536, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -0.7410646417664845, -1.7780695385693461, -2.1149880521204336, -2.206797680902386, -2.2302970200095897, -2.2362421088486366, -2.2376973986646584, -2.2380746134289824, -2.2381501478343644, -13.749291911882521, -18.637988452270076, -20.88943612978822, -21.703423762433317, -21.940601290961542, -22.003097383148326, -22.01856084969413, -22.022580178432815, -22.023385603195614, -36.18031310336364, -48.48896974632707, -54.85021295069932, -57.71273621148431, -58.77092294887566, -59.08886703545842, -59.17106957986865, -59.19270083540491, -59.19704982015773, -56.74918138573556, -76.13227612903052, -86.43185788999459, -91.35849832786921, -93.4102152784983, -94.10737503749404, -94.2987327218738, -94.35007823116933, -94.36045789236462, -63.94690416553452, -85.88695611547901, -97.62249160922019, -103.30692778245327, -105.7394750121991, -106.59814692787336, -106.83951897610439, -106.90485462690224, -106.91809628533954, 2.9187286001474804, 2.610935724462817, 2.525378722574391, 2.50336095881728, 2.4978155357199427, 2.4964184425979203, 2.4960768066648256, 2.4959882771245, 2.4959705509512244, -3.020144781830226, -4.649139729386855, -5.23087316074835, -5.397178730208611, -5.440406122291701, -5.451387545752925, -5.4540784769846145, -5.454776158313109, -5.454915873314045, -9.816955300917657, -13.461854071950452, -15.041048919241, -15.5689396288612, -15.715636019531393, -15.753655779607397, -15.763020791864065, -15.765452121246119, -15.765939179749866, -13.91189692140508, -18.856398632018227, -21.13911969324946, -21.967203742850455, -22.20904300473548, -22.272822019055663, -22.28860667630105, -22.292709747036856, -22.293531966189192, -15.031919875121114, -20.340024732952326, -22.82303801578062, -23.741782434825232, -24.013929357700565, -24.086091895928085, -24.1039786034237, -24.108629950742742, -24.10956213825455]
    for i in range(len(y2)):
        if y2[i] >= 0:
            y2[i] = -0.1
        if y2[i] <= -150:
            y2[i] = -150

    # Slightly offset x-values to avoid overlapping
    x1_offset = [x + np.random.uniform(-0.1, 0.1) for x in x1]
    x2_offset = [x + np.random.uniform(-0.1, 0.1) for x in x2]

    # Create a figure and a set of subplots
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # Plot y1 with left y-axis
    color = 'tab:blue'
    ax1.set_xlabel('均匀分布下Kyber512变体的参数大小 u_s/u_e')
    ax1.set_ylabel('经典核SVP困难度 log_2()', color=color) # labelpad设置标题和坐标轴的距离
    scatter1 = ax1.scatter(x1_offset, y1, color=color, label='困难度', alpha=0.6, marker='+', s=100)
    ax1.axhline(y=118, color=color, linestyle='--')  # Adding the horizontal line for y1
    ax1.text(0.2, 118, 'kyber512 困难度', color=color, verticalalignment='bottom')  # Labeling the horizontal line on the left
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.set_ylim(-152, 152)  # Setting the y-axis limit

    # Move the left y-axis title to a higher position
    ax1.yaxis.set_label_position("left")
    ax1.yaxis.set_label_coords(-0.06, 0.65)

    # Create a second y-axis and plot y2
    ax2 = ax1.twinx()  # Instantiate a second axes that shares the same x-axis
    color = 'tab:red'
    ax2.set_ylabel('解密失败概率 log_2()', color=color)  # We already handled the x-label with ax1
    scatter2 = ax2.scatter(x2_offset, y2, color=color, label='解密失败概率', alpha=0.6, marker='x', s=60)
    ax2.axhline(y=-139, color=color, linestyle='--')  # Adding the horizontal line for y2
    ax2.text(3.8, -139, 'kyber512 解密失败概率', color=color, verticalalignment='bottom', horizontalalignment='right')  # Labeling the horizontal line on the right
    ax2.tick_params(axis='y', labelcolor=color)
    ax2.set_ylim(-152, 152)  # Setting the y-axis limit
    ax2.yaxis.set_label_position("right")
    ax2.yaxis.set_label_coords(1.08, 0.35)

    # Align the tick positions for both y-axes
    y_ticks = np.arange(-150, 151, 50)
    ax1.set_yticks(y_ticks[y_ticks >= 0])  # Only keep non-negative ticks on the left y-axis
    ax2.set_yticks(y_ticks[y_ticks <= 0])  # Only keep non-positive ticks on the right y-axis
    for label in ax2.get_yticklabels():
        label.set_horizontalalignment('left')

    plt.xticks([0, 1, 2, 3, 4])  # Setting x-axis ticks to show only 0, 1, 2, 3, 4
    fig.tight_layout()  # To ensure the right y-label is not clipped
    plt.grid(True)

    ax1.grid(False)
    ax2.grid(False)

    # Adding legends in the center of the plot
    fig.legend(handles=[scatter1, scatter2], loc='center', bbox_to_anchor=(0.72, 0.7)) #设置legend位置
    ax1.tick_params(axis='both', which='major', labelsize=16)
    ax2.tick_params(axis='both', which='major', labelsize=16)

    # Show the plot
    fig.canvas.draw()  # 先强制渲染（必要）

    # 修复负号不显示的问题
    for label in ax2.get_yticklabels():
        label.set_fontname('Times New Roman')  # 或 'Arial'/'DejaVu Sans'
        label.set_horizontalalignment('left')  # 左对齐
    plt.tight_layout(pad=0.5)
    plt.show()

def Kyber768_uniform_plot():
    x1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    x2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    y1 = [173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
          173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173,
          173, 173, 173, 173, 173, 173, 173, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201,
          201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 222, 222, 222, 222, 222,
          222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
          222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222,
          222, 222]
    y2 = [-7.082398933553315, -9.89725853108558, -11.046242593225555, -11.40783511160959,
                     -11.505407122283115, -11.530462458746856, -11.536619093219379, -11.538216463131523,
                     -11.538536405238098, -36.10230973441294, -48.47499617784065, -54.891370402425046,
                     -57.78808867041238, -58.863011759782054, -59.186893221818856, -59.27072371292642,
                     -59.2927905747166, -59.29722753072321, -113.39530784894524, -152.7226128145852, -174.1520823731738,
                     -184.9339806880704, -189.9670904146927, -192.0577257688627, -192.73989452194996,
                     -192.93851684349713, -192.97974920201517, -245.44776524839696, -299.9999999993643, -300.0, -300.0,
                     -300.0, -300.0, -300.0, -300.0, -300.0, -299.99999988211226, -300.0, -300.0, -300.0, -300.0,
                     -300.0, -300.0, -300.0, -300.0, 1.4696376233980981, 0.9171581689623769, 0.7542968867615496,
                     0.7115792819450533, 0.700765025837094, 0.6980369514781141, 0.6973696281717034, 0.6971966876728818,
                     0.6971620592587409, -7.878851648654928, -10.930685075229578, -12.200084624211282,
                     -12.60669532137222, -12.717305407539593, -12.745778994686857, -12.75278007257907,
                     -12.754596839577605, -12.75496074119243, -23.434416496124168, -31.48616924582763,
                     -35.48647714624803, -37.137115995755366, -37.67768538482942, -37.8277325494932,
                     -37.865439552649704, -37.87528153806171, -37.87725593582482, -37.46394273175876,
                     -50.25446885227862, -56.893180804269726, -59.90301381219132, -61.029197780362225,
                     -61.37090935469391, -61.459609229713124, -61.482978071859336, -61.487677929905026,
                     -42.30710428866729, -56.77418688601059, -64.35065708369623, -67.85224667406224, -69.20891172632152,
                     -69.63365833317971, -69.74541542080897, -69.77498178692262, -69.78093489544419, 4.184487254148946,
                     4.03178426437376, 3.9911297942622173, 3.980797446575616, 3.9782035755061895, 3.9775506225729083,
                     3.977390986507305, 3.977349621475947, 3.977341339108536, -0.20801711524337138, -1.1177006139635732,
                     -1.4063252138305833, -1.4841774832706138, -1.5040439015642564, -1.509065890541071,
                     -1.5102949701803388, -1.510613534532063, -1.5106773238021283, -5.102538835142238,
                     -7.323700851818336, -8.178327393385706, -8.434782250548496, -8.502629496946296, -8.519950838408176,
                     -8.524200681905945, -8.525302899956914, -8.525523644415946, -7.990516480472883,
                     -11.077640059086402, -12.365458923335906, -12.77910891742015, -12.891779135204281,
                     -12.9207946021938, -12.927929660950422, -12.929781245556828, -12.930152123800879,
                     -8.773674800953657, -12.102352179622573, -13.516057751538353, -13.97837447800483,
                     -14.105400694862231, -14.138202461746559, -14.146274368227052, -14.14836945756965,
                     -14.148789130874647]


    for i in range(len(y2)):
        if y2[i] >= 0:
            y2[i] = -0.1
        if y2[i] <= -250:
            y2[i] = -250


    # Slightly offset x-values to avoid overlapping
    x1_offset = [x + np.random.uniform(-0.1, 0.1) for x in x1]
    x2_offset = [x + np.random.uniform(-0.1, 0.1) for x in x2]

    # Create a figure and a set of subplots
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # Plot y1 with left y-axis
    color = 'tab:blue'
    ax1.set_xlabel('均匀分布下Kyber768变体的参数大小 u_s/u_e')
    ax1.set_ylabel('经典核SVP困难度 log_2()', color=color) # labelpad设置标题和坐标轴的距离
    scatter1 = ax1.scatter(x1_offset, y1, color=color, label='困难度', alpha=0.6, marker='+', s=100)
    ax1.axhline(y=183, color=color, linestyle='--')  # Adding the horizontal line for y1
    ax1.text(0.2, 183, 'kyber768 困难度', color=color, verticalalignment='bottom')  # Labeling the horizontal line on the left
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.set_ylim(-250, 251)  # Setting the y-axis limit

    # Move the left y-axis title to a higher position
    ax1.yaxis.set_label_position("left")
    ax1.yaxis.set_label_coords(-0.06, 0.65)

    # Create a second y-axis and plot y2
    ax2 = ax1.twinx()  # Instantiate a second axes that shares the same x-axis
    color = 'tab:red'
    ax2.set_ylabel('解密失败概率 log_2()', color=color)  # We already handled the x-label with ax1
    scatter2 = ax2.scatter(x2_offset, y2, color=color, label='解密失败概率', alpha=0.6, marker='x', s=60)
    ax2.axhline(y=-164, color=color, linestyle='--')  # Adding the horizontal line for y2
    ax2.text(3.8, -164, 'kyber768 解密失败概率', color=color, verticalalignment='bottom', horizontalalignment='right')  # Labeling the horizontal line on the right
    ax2.tick_params(axis='y', labelcolor=color)
    ax2.set_ylim(-250, 251)  # Setting the y-axis limit
    ax2.yaxis.set_label_position("right")
    ax2.yaxis.set_label_coords(1.08, 0.35)

    # Align the tick positions for both y-axes
    y_ticks = np.arange(-250, 251, 50)
    ax1.set_yticks(y_ticks[y_ticks >= 0])  # Only keep non-negative ticks on the left y-axis
    ax2.set_yticks(y_ticks[y_ticks <= 0])  # Only keep non-positive ticks on the right y-axis

    plt.xticks([0, 1, 2, 3, 4])  # Setting x-axis ticks to show only 0, 1, 2, 3, 4
    fig.tight_layout()  # To ensure the right y-label is not clipped
    plt.grid(True)

    ax1.grid(False)
    ax2.grid(False)

    # Adding legends in the center of the plot
    fig.legend(handles=[scatter1, scatter2], loc='center', bbox_to_anchor=(0.72, 0.7)) #设置legend位置
    ax1.tick_params(axis='both', which='major', labelsize=16)
    ax2.tick_params(axis='both', which='major', labelsize=16)

    # Show the plot
    for label in ax2.get_yticklabels():
        label.set_fontname('Times New Roman')  # 或 'Arial'/'DejaVu Sans'
        label.set_horizontalalignment('left')  # 左对齐
    plt.tight_layout(pad=0.5)
    plt.show()


def Kyber1024_uniform_plot():
    x1 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    x2 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
    y1 = [244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
                          244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244,
                          244, 244, 244, 244, 244, 244, 244, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
                          281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281,
                          281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 308, 308, 308, 308, 308,
                          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
                          308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308,
                          308, 308]
    y2 = [-4.156127760769777, -6.107428351532349, -6.835246068460124, -7.048963695628709,
          -7.105043074791695, -7.119326835907966, -7.122829318770559, -7.123737566834213,
          -7.123919457153469, -26.53764176500958, -35.65835108817261, -40.26031980704079,
          -42.217474079546975, -42.881994790164036, -43.07021293691973, -43.117827746253134,
          -43.13027873269141, -43.132777752524206, -85.16730709184093, -114.56297623993827,
          -130.45883681215767, -138.33176812684925, -141.8768189788728, -143.24187975070367,
          -143.6526091088355, -143.76704662917282, -143.79044727505303, -185.21507641355427,
          -249.75046810825927, -285.16701299353434, -299.85906463990636, -299.9996645801565,
          -299.9999790391747, -299.99999258711966, -299.9999947223675, -299.99999509979426,
          -243.54070559240427, -299.9999999976212, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0, -300.0,
          2.6818224984018437, 2.338629300165113, 2.242360556401143, 2.217517072905239, 2.211255349569013,
          2.209677499224904, 2.209291644111734, 2.2091916546987753, 2.209171633868054, -4.786812281339535,
          -6.917389637457027, -7.728983603076459, -7.970768037735502, -8.034555808733266,
          -8.050827783253665, -8.054819346397965, -8.05585452394387, -8.056061839179673, -16.86638141439721,
          -22.763863597134165, -25.57083276480217, -26.639551796908297, -26.963301134411726,
          -27.04992804903807, -27.071455723542908, -27.077057740739484, -27.078180658155084,
          -27.610375399151238, -37.07155621447903, -41.85872017626042, -43.9094036027769,
          -44.61258087968199, -44.812948814805914, -44.86374147691903, -44.877031134401186,
          -44.87969889707742, -31.291941536264094, -42.00372844492528, -47.48907605354216,
          -49.90000415155094, -50.75734240570106, -51.00752401155538, -51.07148410698545,
          -51.08825947731165, -51.09162915603681, 4.878091661606835, 4.786044428614388, 4.762010453808423,
          4.755934398120037, 4.754411100275413, 4.7540277721065465, 4.753934062729297, 4.753909781190444,
          4.75390491941343, 1.3242769972412156, 0.7438506372983958, 0.5716933556126353, 0.526440021226644,
          0.5149770087923154, 0.5120848327037024, 0.5113773409230369, 0.5111939887756971,
          0.5111572755141656, -2.5945584858639257, -4.109101317476815, -4.641224065563267,
          -4.791948878748113, -4.831004493824764, -4.840917686599196, -4.843346331708911,
          -4.8439759751807925, -4.844102063385566, -4.873960123630194, -7.0303343240139355,
          -7.854258594522014, -8.100243469534893, -8.165192525907345, -8.181764600883945, -8.18583002189308,
          -8.186884369941687, -8.187095525295453, -5.48838447443334, -7.824863287010348, -8.735496179267036,
          -9.011371312783686, -9.084629993728344, -9.103353037362657, -9.107948063022487,
          -9.109139890295037, -9.109378585454706]

    for i in range(len(y2)):
        if y2[i] >= 0:
            y2[i] = -0.1


    # Slightly offset x-values to avoid overlapping
    x1_offset = [x + np.random.uniform(-0.1, 0.1) for x in x1]
    x2_offset = [x + np.random.uniform(-0.1, 0.1) for x in x2]

    # Create a figure and a set of subplots
    fig, ax1 = plt.subplots(figsize=(10, 6))

    # Plot y1 with left y-axis
    color = 'tab:blue'
    ax1.set_xlabel('均匀分布下Kyber1024变体的参数大小 u_s/u_e')
    ax1.set_ylabel('经典核SVP困难度 log_2()', color=color) # labelpad设置标题和坐标轴的距离
    scatter1 = ax1.scatter(x1_offset, y1, color=color, label='困难度', alpha=0.6, marker='+', s=100)
    ax1.axhline(y=256, color=color, linestyle='--')  # Adding the horizontal line for y1
    ax1.text(0.2, 256, 'kyber1024 困难度', color=color, verticalalignment='bottom')  # Labeling the horizontal line on the left
    ax1.tick_params(axis='y', labelcolor=color)
    ax1.set_ylim(-300, 321)  # Setting the y-axis limit

    # Move the left y-axis title to a higher position
    ax1.yaxis.set_label_position("left")
    ax1.yaxis.set_label_coords(-0.06, 0.65)

    # Create a second y-axis and plot y2
    ax2 = ax1.twinx()  # Instantiate a second axes that shares the same x-axis
    color = 'tab:red'
    ax2.set_ylabel('解密失败概率 log_2()', color=color)  # We already handled the x-label with ax1
    scatter2 = ax2.scatter(x2_offset, y2, color=color, label='解密失败概率', alpha=0.6, marker='x', s=60)
    ax2.axhline(y=-174, color=color, linestyle='--')  # Adding the horizontal line for y2
    ax2.text(3.8, -174, 'kyber1024 解密失败概率', color=color, verticalalignment='bottom', horizontalalignment='right')  # Labeling the horizontal line on the right
    ax2.tick_params(axis='y', labelcolor=color)
    ax2.set_ylim(-300, 321)  # Setting the y-axis limit
    ax2.yaxis.set_label_position("right")
    ax2.yaxis.set_label_coords(1.08, 0.35)

    # Align the tick positions for both y-axes
    y_ticks = np.arange(-300, 321, 50)
    ax1.set_yticks(y_ticks[y_ticks >= 0])  # Only keep non-negative ticks on the left y-axis
    ax2.set_yticks(y_ticks[y_ticks <= 0])  # Only keep non-positive ticks on the right y-axis

    plt.xticks([0, 1, 2, 3, 4])  # Setting x-axis ticks to show only 0, 1, 2, 3, 4
    fig.tight_layout()  # To ensure the right y-label is not clipped
    plt.grid(True)

    ax1.grid(False)
    ax2.grid(False)

    # Adding legends in the center of the plot
    fig.legend(handles=[scatter1, scatter2], loc='center', bbox_to_anchor=(0.72, 0.7)) #设置legend位置
    ax1.tick_params(axis='both', which='major', labelsize=16)
    ax2.tick_params(axis='both', which='major', labelsize=16)

    # Show the plot
    for label in ax2.get_yticklabels():
        label.set_fontname('Times New Roman')  # 或 'Arial'/'DejaVu Sans'
        label.set_horizontalalignment('left')  # 左对齐
    plt.tight_layout(pad=0.5)
    plt.show()


Kyber512_uniform_plot()
Kyber768_uniform_plot()
Kyber1024_uniform_plot()